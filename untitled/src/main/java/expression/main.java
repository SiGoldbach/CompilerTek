package expression;

import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;

import java.io.IOException;

public class main {
    public static void main(String[] args) throws IOException {

        // we expect exactly one argument: the name of the input file
        /*if (args.length != 1) {
            System.err.println("\n");
            System.err.println("Impl Interpreter\n");
            System.err.println("=================\n\n");
            System.err.println("Please give as input argument a filename\n");
            System.exit(-1);
        }*/
        String filename = "C:\\Users\\siggo\\IdeaProjects\\CompilerTek\\untitled\\src\\main\\java\\expression\\02-trafiklys-minimal.txt";

        // open the input file
        CharStream input = CharStreams.fromFileName(filename);
        //new ANTLRFileStream (filename); // depricated

        // create a lexer/scanner
        hardwareLexer lex = new hardwareLexer(input);

        // get the stream of tokens from the scanner
        CommonTokenStream tokens = new CommonTokenStream(lex);

        // create a parser
        hardwareParser parser = new hardwareParser(tokens);

        // and parse anything from the grammar for "start"
        ParseTree parseTree = parser.start();

        // Construct an interpreter and run it on the parse tree
        Interpreter interpreter = new Interpreter();
        AST result = interpreter.visit(parseTree);
        System.out.println("The result is: " + result.eval());
    }
}

// We write an interpreter that implements interface
// "implVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Integer.

class Interpreter extends AbstractParseTreeVisitor<AST> implements hardwareVisitor<AST> {
    Environment env=new Environment();

    @Override
    public AST visitStart(hardwareParser.StartContext ctx) {
        return null;
    }

    @Override
    public AST visitName(hardwareParser.NameContext ctx) {
        return new Name(ctx.id.getText());
    }

    @Override
    public AST visitInput(hardwareParser.InputContext ctx) {
        return new Input(ctx.idp.getText());
    }

    @Override
    public AST visitOutput(hardwareParser.OutputContext ctx) {
        System.out.println("Visiting output");
        Output a= new Output(ctx.idp.getText());
        System.out.println(a.name);
        env.outputs.put(a.name,a.val);
        return null;
    }

    @Override
    public AST visitUpdate(hardwareParser.UpdateContext ctx) {
        return new Update(ctx.id.getText());
    }

    @Override
    public AST visitLatch(hardwareParser.LatchContext ctx) {
        Latch a = new Latch(ctx.id.getText());
        env.latches.put(a.name,a.val);
        return null;

    }

    @Override
    public AST visitSimulate(hardwareParser.SimulateContext ctx) {
        Simulate a= new Simulate(ctx.id.getText());
        env.simulate=a;
        return null;
    }

    @Override
    public AST visitNot(hardwareParser.NotContext ctx) {
        AST a = new Not(visit(ctx.ex1));

        return a;
    }

    @Override
    public AST visitOr(hardwareParser.OrContext ctx) {
        AST a = new Or(visit(ctx.ex1), visit(ctx.ex2));

        return a;
    }

    @Override
    public AST visitParanthesis(hardwareParser.ParanthesisContext ctx) {
        AST a = new Paranthesis(visit(ctx.ex1));
        return a;
    }

    @Override
    public AST visitAnd(hardwareParser.AndContext ctx) {
        AST a = new And(visit(ctx.ex1), visit(ctx.ex2));
        return a;
    }

    @Override
    public AST visitBinexpr(hardwareParser.BinexprContext ctx) {
        AST a = new BinExpr(ctx.id.getText());
        return a;
    }


}

